// <auto-generated />
using System;
using AccountServer.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231120033513_itemDb")]
    partial class itemDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AccountServer.Model.CurrencyDb", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Diamond")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("playerId")
                        .HasColumnType("int");

                    b.HasKey("CurrencyId");

                    b.HasIndex("CurrencyId")
                        .IsUnique();

                    b.HasIndex("playerId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("AccountServer.Model.GuestDb", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GuestUid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("playerId")
                        .HasColumnType("int");

                    b.HasKey("GuestId");

                    b.HasIndex("GuestId")
                        .IsUnique();

                    b.HasIndex("playerId");

                    b.ToTable("Guest");
                });

            modelBuilder.Entity("AccountServer.Model.InventoryDb", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("playerId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("InventoryId")
                        .IsUnique();

                    b.HasIndex("playerId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("AccountServer.Model.Item.MaterialItemDb", b =>
                {
                    b.Property<int>("MaterialItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("inventoryId")
                        .HasColumnType("int");

                    b.HasKey("MaterialItemId");

                    b.HasIndex("MaterialItemId")
                        .IsUnique();

                    b.HasIndex("inventoryId");

                    b.ToTable("Material_Item");
                });

            modelBuilder.Entity("AccountServer.Model.Item.PotionItemDb", b =>
                {
                    b.Property<int>("PotionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("inventoryId")
                        .HasColumnType("int");

                    b.HasKey("PotionItemId");

                    b.HasIndex("PotionItemId")
                        .IsUnique();

                    b.HasIndex("inventoryId");

                    b.ToTable("Potion_Item");
                });

            modelBuilder.Entity("AccountServer.Model.Item.RuneItemDb", b =>
                {
                    b.Property<int>("RuneItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Equipped")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("inventoryId")
                        .HasColumnType("int");

                    b.HasKey("RuneItemId");

                    b.HasIndex("inventoryId");

                    b.ToTable("Rune_Item");
                });

            modelBuilder.Entity("AccountServer.Model.Item.WeaponItemDb", b =>
                {
                    b.Property<int>("WeaponItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Equipped")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("inventoryId")
                        .HasColumnType("int");

                    b.HasKey("WeaponItemId");

                    b.HasIndex("inventoryId");

                    b.ToTable("Weapon_Item");
                });

            modelBuilder.Entity("AccountServer.Model.OauthDb", b =>
                {
                    b.Property<int>("OauthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OauthToken")
                        .HasColumnType("longtext");

                    b.Property<int?>("oatuhType")
                        .HasColumnType("int");

                    b.Property<int>("playerId")
                        .HasColumnType("int");

                    b.HasKey("OauthId");

                    b.HasIndex("OauthId")
                        .IsUnique();

                    b.HasIndex("playerId");

                    b.ToTable("Oauth");
                });

            modelBuilder.Entity("AccountServer.Model.PlayerDb", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PlayerId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Player");
                });

            modelBuilder.Entity("AccountServer.Model.PlayerStatDb", b =>
                {
                    b.Property<int>("PlayerStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Atk")
                        .HasColumnType("int");

                    b.Property<float>("AtkSpeed")
                        .HasColumnType("float");

                    b.Property<float>("CritDamage")
                        .HasColumnType("float");

                    b.Property<int>("CritRate")
                        .HasColumnType("int");

                    b.Property<float>("DodgeTime")
                        .HasColumnType("float");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxHp")
                        .HasColumnType("int");

                    b.Property<float>("MoveSpeed")
                        .HasColumnType("float");

                    b.Property<float>("RunMultiplier")
                        .HasColumnType("float");

                    b.Property<int>("playerId")
                        .HasColumnType("int");

                    b.HasKey("PlayerStatId");

                    b.HasIndex("PlayerStatId")
                        .IsUnique();

                    b.HasIndex("playerId");

                    b.ToTable("Player_Stat");
                });

            modelBuilder.Entity("AccountServer.Model.CurrencyDb", b =>
                {
                    b.HasOne("AccountServer.Model.PlayerDb", "PlayerId")
                        .WithMany()
                        .HasForeignKey("playerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerId");
                });

            modelBuilder.Entity("AccountServer.Model.GuestDb", b =>
                {
                    b.HasOne("AccountServer.Model.PlayerDb", "PlayerId")
                        .WithMany()
                        .HasForeignKey("playerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerId");
                });

            modelBuilder.Entity("AccountServer.Model.InventoryDb", b =>
                {
                    b.HasOne("AccountServer.Model.PlayerDb", "PlayerId")
                        .WithMany()
                        .HasForeignKey("playerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerId");
                });

            modelBuilder.Entity("AccountServer.Model.Item.MaterialItemDb", b =>
                {
                    b.HasOne("AccountServer.Model.InventoryDb", "InventoryId")
                        .WithMany("MaterialItems")
                        .HasForeignKey("inventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryId");
                });

            modelBuilder.Entity("AccountServer.Model.Item.PotionItemDb", b =>
                {
                    b.HasOne("AccountServer.Model.InventoryDb", "InventoryId")
                        .WithMany("PotionItems")
                        .HasForeignKey("inventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryId");
                });

            modelBuilder.Entity("AccountServer.Model.Item.RuneItemDb", b =>
                {
                    b.HasOne("AccountServer.Model.InventoryDb", "InventoryId")
                        .WithMany("RuneItems")
                        .HasForeignKey("inventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryId");
                });

            modelBuilder.Entity("AccountServer.Model.Item.WeaponItemDb", b =>
                {
                    b.HasOne("AccountServer.Model.InventoryDb", "InventoryId")
                        .WithMany("WeaponItems")
                        .HasForeignKey("inventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryId");
                });

            modelBuilder.Entity("AccountServer.Model.OauthDb", b =>
                {
                    b.HasOne("AccountServer.Model.PlayerDb", "PlayerId")
                        .WithMany()
                        .HasForeignKey("playerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerId");
                });

            modelBuilder.Entity("AccountServer.Model.PlayerStatDb", b =>
                {
                    b.HasOne("AccountServer.Model.PlayerDb", "PlayerId")
                        .WithMany()
                        .HasForeignKey("playerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerId");
                });

            modelBuilder.Entity("AccountServer.Model.InventoryDb", b =>
                {
                    b.Navigation("MaterialItems");

                    b.Navigation("PotionItems");

                    b.Navigation("RuneItems");

                    b.Navigation("WeaponItems");
                });
#pragma warning restore 612, 618
        }
    }
}
